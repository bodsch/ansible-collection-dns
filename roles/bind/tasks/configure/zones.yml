---

- name: do facts module to get latest information
  ansible.builtin.setup:
    gather_subset:
      - 'network'
      - 'all_ipv4_addresses'
      - 'all_ipv6_addresses'

- name: define a list of all host IP addresses
  ansible.builtin.set_fact:
    host_all_addresses: "{{ ansible_all_ipv4_addresses | union(ansible_all_ipv6_addresses) }}"
  tags: bind

- name: read zone data
  bodsch.dns.bind_zone_data:
    zone_directory: "{{ bind_zone_dir }}"
    zone_data: "{{ bind_zones }}"
  register: bind_zone_data
  tags: bind

- name: Create forward lookup zone file
  become: true
  ansible.builtin.template:
    src: etc/bind_zone.j2
    dest: "{{ bind_zone_dir }}/{{ item.name | bodsch.dns.zone_filename(bind_zone_data) }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    backup: true
    validate: 'named-checkzone -d {{ item.name }} %s'
  loop: "{{ bind_zones }}"
  loop_control:
    label: "{{ item.name }}"
  when: >
    (item.name | bodsch.dns.zone_filename(bind_zone_data) | string | length > 0) and
    (item.state | default('present') == 'present') and
    (item.create_forward_zones | default('true') | bool) and
    ((item.type is defined and item.type == 'primary') or
    (item.type is not defined and item.primaries is defined and
    (host_all_addresses | intersect(item.primaries) | length > 0)))
  # notify: reload bind
  tags: bind

# - name: reverse lookup zone file
#   run_once: true
#   debug:
#     msg:
#       - "{{ (item.1 | bodsch.dns.zone_filename(bind_zone_data) | string | length > 0) }}"
#       - "{{ (item.state | default('present') == 'present') }}"
#       - "{{ (item.create_reverse_zones is not defined or item.create_reverse_zones) }}"
#       - "{{ (
#                 (item[0].type is defined and item[0].type == 'primary') or
#                 (item[0].type is not defined and item[0].primaries is defined and
#                 (host_all_addresses | intersect(item[0].primaries) | length > 0))
#             )
#         }}"
#       - "{{ (host_all_addresses | intersect(item[0].primaries)) }}"
#   with_subelements:
#     - "{{ bind_zones }}"
#     - networks
#     - flags:
#       skip_missing: true
#   loop_control:
#     label: "{{ item.1 }}"

- name: Create reverse lookup zone file
  become: true
  ansible.builtin.template:
    src: etc/reverse_zone.j2
    dest: "{{ bind_zone_dir }}/{{ item.1 | bodsch.dns.zone_filename(bind_zone_data) }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    backup: true
    # validate: "named-checkzone {{ ('.'.join(item.1.replace(item.1 + '.','').split('.')[::-1])) }}.in-addr.arpa %s"
  with_subelements:
    - "{{ bind_zones }}"
    - networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  when: >
    (item.1 | bodsch.dns.zone_filename(bind_zone_data) | string | length > 0) and
    (item.state | default('present') == 'present') and
    (item.create_reverse_zones | default('true') | bool) and
    (
        (item[0].type is defined and item[0].type == 'primary') or
        (item[0].type is not defined and item[0].primaries is defined and
        (host_all_addresses | intersect(item[0].primaries) | length > 0))
    )
  # notify: reload bind
  tags: bind

# - name: reverse IPv6 lookup zone file
#   run_once: true
#   debug:
#     msg:
#       - "{{ (item.1 | bodsch.dns.zone_filename(bind_zone_data) | string | length > 0) }}"
#       - "{{ (item.state | default('present') == 'present') }}"
#       - "{{ (item.create_reverse_zones is not defined or item.create_reverse_zones) }}"
#       - "{{ (
#                 (item[0].type is defined and item[0].type == 'primary') or
#                 (item[0].type is not defined and item[0].primaries is defined and
#                 (host_all_addresses | intersect(item[0].primaries) | length > 0))
#             )
#         }}"
#       - "{{ (host_all_addresses | intersect(item[0].primaries)) }}"
#   with_subelements:
#     - "{{ bind_zones }}"
#     - ipv6_networks
#     - flags:
#       skip_missing: true
#   loop_control:
#     label: "{{ item.1 }}"

- name: Create reverse IPv6 lookup zone file
  ansible.builtin.template:
    src: etc/reverse_zone_ipv6.j2
    dest: "{{ bind_zone_dir }}/{{ item.1 | bodsch.dns.zone_filename(bind_zone_data) }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    backup: true
    # validate: "named-checkzone {{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1 | regex_replace('^.*/','')|int)//2):] }} %s"
  become: true
  with_subelements:
    - "{{ bind_zones }}"
    - ipv6_networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  when: >
    (item.1 | bodsch.dns.zone_filename(bind_zone_data) | string | length > 0) and
    (item.state | default('present') == 'present') and
    (item.create_reverse_zones | default('true') | bool) and
    ((item[0].type is defined and item[0].type == 'primary') or
    (item[0].type is not defined and item[0].primaries is defined and
    (host_all_addresses | intersect(item[0].primaries) | length > 0)))
  # notify: reload bind
  tags: bind

...
