---

- name: Create serial, based on UTC UNIX time
  command: date -u +%s
  register: timestamp
  changed_when: false
  run_once: true
  check_mode: false
  tags: bind

- name: define current_date and current_timestamp
  ansible.builtin.set_fact:
    current_date: "{{ ansible_date_time.iso8601[0:10] }}"
    current_timestamp: "{{ ansible_date_time.iso8601[0:19] }}"
    current_basic_short: "{{ ansible_date_time.iso8601_basic_short | replace('T','') }}"

- name: d
  debug:
    msg:
      - "{{ timestamp.stdout }}"
      - "{{ current_date }}"
      - "{{ current_timestamp }}"
      - "{{ ansible_date_time.epoch }}"
      - "{{ current_basic_short }}"

- name: Set list of all host IP addresses
  ansible.builtin.set_fact:
    host_all_addresses: "{{ ansible_all_ipv4_addresses | union(ansible_all_ipv6_addresses) }}"
  tags: bind

# TODO
# - name: Read forward zone hashes
#   run_once: true
#   ansible.builtin.shell: 'grep -s "^; Hash:" {{ bind_zone_dir }}/{{ item.name }} || true'
#   changed_when: false
#   check_mode: false
#   register: forward_hashes_temp
#   loop: "{{ bind_zones }}"
#   loop_control:
#     label: "{{ item.name }}"
#   tags: bind
#
# - name: forward_hashes_temp
#   debug:
#     msg:
#       - "{{ forward_hashes_temp | default([]) }}"
#
# - name: Create dict of forward hashes
#   run_once: true
#   ansible.builtin.set_fact:
#     forward_hashes: "{{ forward_hashes | default([]) + [ {'hash': item.stdout | default(), 'name': item.item.name} ] }}"
#   loop: "{{ forward_hashes_temp.results }}"
#   loop_control:
#     label: "{{ item.item.name }}"
#   tags: bind
#
# - name: forward_hashes
#   debug:
#     msg:
#       - "{{ forward_hashes }}"

- name: Read forward zone hashes
  bodsch.dns.bind_zone_hash:
    zone_directory: "{{ bind_zone_dir }}"
    zone_file: "{{ item.name }}"
  changed_when: false
  check_mode: false
  register: forward_hashes_temp
  loop: "{{ bind_zones }}"
  loop_control:
    label: "{{ item.name }}"
  tags: bind

- name: Create dict of forward hashes
  run_once: true
  ansible.builtin.set_fact:
    forward_hashes: "{{ forward_hashes | default([]) + item.hash }}"
  loop: "{{ forward_hashes_temp.results }}"
  loop_control:
    label: "{{ item }}"
  tags: bind


# # TODO
# - name: Read reverse ipv4 zone hashes
#   ansible.builtin.shell: "grep -s \"^; Hash:\" {{ bind_zone_dir }}/{{ ('.'.join(item.1.replace(item.1 + '.','').split('.')[::-1])) }}.in-addr.arpa || true"
#   changed_when: false
#   check_mode: false
#   register: reverse_hashes_temp
#   with_subelements:
#     - "{{ bind_zones }}"
#     - networks
#     - flags:
#       skip_missing: true
#   # no_log: true
#   run_once: true
#   loop_control:
#     label: "{{ item.1 }}"
#   tags: bind
#
# #- name: reverse_hashes_temp
# #  debug:
# #    msg:
# #      - "{{ reverse_hashes_temp | default([]) }}"
#
# - name: Create dict of reverse hashes
#   ansible.builtin.set_fact:
#     reverse_hashes: "{{ reverse_hashes | default([]) + [ {'hash': item.0.stdout | default(), 'network': item.1} ] }}"
#   with_subelements:
#     - "{{ reverse_hashes_temp.results }}"
#     - item
#   run_once: true
#   #loop_control:
#   #  label: "{{ item.1.name | default(item.0.cmd.split(' ')[4]) }}"
#   tags: bind
#
# - name: reverse_hashes
#   debug:
#     msg: "{{ reverse_hashes | default([]) }}"

- name: Read reverse ipv4 zone hashes
  bodsch.dns.bind_zone_hash:
    zone_directory: "{{ bind_zone_dir }}"
    zone_file: "{{ ('.'.join(item.1.replace(item.1 + '.','').split('.')[::-1])) }}.in-addr.arpa"
    networks: "{{ item.1 }}"
    reverse_zone: true
  changed_when: false
  check_mode: false
  register: reverse_hashes_temp
  with_subelements:
    - "{{ bind_zones }}"
    - networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  tags: bind

- name: Create dict of reverse hashes
  run_once: true
  ansible.builtin.set_fact:
    reverse_hashes: "{{ reverse_hashes | default([]) + item.hash }}"
  loop: "{{ reverse_hashes_temp.results }}"
  #loop_control:
  #  label: "{{ item.hash }}"
  tags: bind

#- name: reverse_hashes
#  debug:
#    msg: "{{ reverse_hashes }}"


# # TODO
# - name: Read reverse ipv6 zone hashes
#   ansible.builtin.shell: "grep -s \"^; Hash:\" {{ bind_zone_dir }}/{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }} || true"
#   changed_when: false
#   check_mode: false
#   register: reverse_hashes_ipv6_temp
#   with_subelements:
#     - "{{ bind_zones }}"
#     - ipv6_networks
#     - flags:
#       skip_missing: true
#   run_once: true
#   loop_control:
#     label: "{{ item.1 }}"
#   tags: bind
#
# - name: reverse_hashes_ipv6_temp
#   debug:
#     msg:
#       - "{{ reverse_hashes_ipv6_temp | default([]) }}"
#
# - name: Create dict of reverse ipv6 hashes
#   ansible.builtin.set_fact:
#     reverse_hashes_ipv6: "{{ reverse_hashes_ipv6 | default([]) + [ {'hash': item.0.stdout | default(), 'network': item.1} ] }}"
#   with_subelements:
#     - "{{ reverse_hashes_ipv6_temp.results }}"
#     - item
#   run_once: true
#   loop_control:
#     label: "{{ item.1.name | default(item.0.cmd.split(' ')[4]) }}"
#   tags: bind
#
# - name: reverse_hashes_ipv6
#   debug:
#     msg:
#       - "{{ reverse_hashes_ipv6 | default([]) }}"

- name: Read reverse ipv6 zone hashes
  bodsch.dns.bind_zone_hash:
    zone_directory: "{{ bind_zone_dir }}"
    zone_file: "{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }}"
    networks: "{{ item.1 }}"
    reverse_zone: true
  changed_when: false
  check_mode: false
  register: reverse_hashes_ipv6_temp
  with_subelements:
    - "{{ bind_zones }}"
    - ipv6_networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  tags: bind

- name: Create dict of reverse ipv6 hashes
  run_once: true
  ansible.builtin.set_fact:
    reverse_hashes_ipv6: "{{ reverse_hashes_ipv6 | default([]) + item.hash }}"
  loop: "{{ reverse_hashes_ipv6_temp.results }}"
  #loop_control:
  #  label: "{{ item.hash }}"
  tags: bind
##
## #- name: reverse_hashes
## #  debug:
## #    msg: "{{ reverse_hashes }}"

- name: Create forward lookup zone file
  become: true
  ansible.builtin.template:
    src: etc/bind_zone.j2
    dest: "{{ bind_zone_dir }}/{{ item.name }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    validate: 'named-checkzone -d {{ item.name }} %s'
  loop: "{{ bind_zones }}"
  loop_control:
    label: "{{ item.name }}"
  when: >
    (item.create_forward_zones is not defined or item.create_forward_zones) and
    ((item.type is defined and item.type == 'primary') or
    (item.type is not defined and item.primaries is defined and
    (host_all_addresses | intersect(item.primaries) | length > 0)))
  # notify: reload bind
  tags: bind

- name: Create reverse lookup zone file
  become: true
  ansible.builtin.template:
    src: etc/reverse_zone.j2
    dest: "{{ bind_zone_dir }}/{{ ('.'.join(item.1.replace(item.1 + '.', '').split('.')[::-1])) }}.in-addr.arpa"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    # validate: "named-checkzone {{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa %s"
  with_subelements:
    - "{{ bind_zones }}"
    - networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  when: >
    (item.create_reverse_zones is not defined or item.create_reverse_zones) and
    ((item[0].type is defined and item[0].type == 'primary') or
    (item[0].type is not defined and item[0].primaries is defined and
    (host_all_addresses | intersect(item[0].primaries) | length > 0)))
  # notify: reload bind
  tags: bind
#
# - name: Create reverse IPv6 lookup zone file
#   ansible.builtin.template:
#     src: etc/reverse_zone_ipv6.j2
#     dest: "{{ bind_zone_dir }}/{{ (item.1 | ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }}"
#     owner: "{{ bind_owner }}"
#     group: "{{ bind_group }}"
#     mode: "{{ bind_zone_file_mode }}"
#     setype: named_zone_t
#     validate: "named-checkzone {{ (item.1 | ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):] }} %s"
#   become: true
#   with_subelements:
#     - "{{ bind_zones }}"
#     - ipv6_networks
#     - flags:
#       skip_missing: true
#   loop_control:
#     label: "{{ item.1 }}"
#   when: >
#     (item.create_reverse_zones is not defined or item.create_reverse_zones) and
#     ((item[0].type is defined and item[0].type == 'primary') or
#     (item[0].type is not defined and item[0].primaries is defined and
#     (host_all_addresses | intersect(item[0].primaries) | length > 0)))
#   notify: reload bind
#   tags: bind
#
